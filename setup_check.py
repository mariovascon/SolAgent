#!/usr/bin/env python3
"""
üîç SolAgent v1.2 - Verifica√ß√£o de Setup
=====================================

Script para verificar se tudo est√° funcionando corretamente
antes de subir para o GitHub.
"""

import os
import sys
import json
import importlib.util

def check_file_exists(filepath, name):
    """Verifica se um arquivo existe"""
    if os.path.exists(filepath):
        print(f"‚úÖ {name}: OK")
        return True
    else:
        print(f"‚ùå {name}: FALTANDO")
        return False

def check_python_module(module_name):
    """Verifica se um m√≥dulo Python pode ser importado"""
    try:
        spec = importlib.util.find_spec(module_name)
        if spec is not None:
            print(f"‚úÖ M√≥dulo {module_name}: OK")
            return True
        else:
            print(f"‚ùå M√≥dulo {module_name}: N√ÉO ENCONTRADO")
            return False
    except Exception as e:
        print(f"‚ùå M√≥dulo {module_name}: ERRO - {e}")
        return False

def main():
    print("üåü SolAgent v1.2 - Verifica√ß√£o de Setup")
    print("=" * 50)
    
    # Verificar arquivos essenciais
    files_to_check = [
        ("main.py", "Arquivo principal"),
        ("config.example.json", "Configura√ß√£o exemplo"),
        ("requirements.txt", "Depend√™ncias"),
        ("README.md", "Documenta√ß√£o"),
        (".gitignore", "Git ignore"),
        ("core/brain.py", "C√©rebro principal"),
        ("core/executor.py", "Executor"),
        ("core/logger.py", "Sistema de logs"),
        ("core/audio_input.py", "Entrada de √°udio"),
        ("core/audio_output.py", "Sa√≠da de √°udio"),
        ("actions/browser_actions.py", "A√ß√µes do navegador"),
        ("actions/system_actions.py", "A√ß√µes do sistema"),
    ]
    
    print("\nüìÅ VERIFICANDO ARQUIVOS:")
    all_files_ok = True
    for filepath, name in files_to_check:
        if not check_file_exists(filepath, name):
            all_files_ok = False
    
    # Verificar m√≥dulos Python essenciais
    print("\nüêç VERIFICANDO M√ìDULOS PYTHON:")
    modules_to_check = [
        "openai",
        "speech_recognition", 
        "pyttsx3",
        "pyaudio",
        "whisper",
        "keyboard",
        "requests"
    ]
    
    all_modules_ok = True
    for module in modules_to_check:
        if not check_python_module(module):
            all_modules_ok = False
    
    # Verificar config.json
    print("\n‚öôÔ∏è VERIFICANDO CONFIGURA√á√ÉO:")
    if os.path.exists("config.json"):
        try:
            with open("config.json", "r", encoding="utf-8") as f:
                config = json.load(f)
            
            if "openai_api_key" in config:
                if config["openai_api_key"] and config["openai_api_key"] != "sua-chave-aqui":
                    print("‚úÖ Chave OpenAI: CONFIGURADA")
                else:
                    print("‚ö†Ô∏è Chave OpenAI: N√ÉO CONFIGURADA (opcional)")
            
            print(f"‚úÖ Configura√ß√£o: {len(config)} par√¢metros")
            
        except Exception as e:
            print(f"‚ùå Erro ao ler config.json: {e}")
    else:
        print("‚ö†Ô∏è config.json n√£o encontrado (pode usar config.example.json)")
    
    # Resumo final
    print("\n" + "=" * 50)
    if all_files_ok and all_modules_ok:
        print("üéâ SETUP COMPLETO! SolAgent est√° pronto para o GitHub!")
        print("\nüìã PR√ìXIMOS PASSOS:")
        print("1. Criar reposit√≥rio no GitHub")
        print("2. git remote add origin <URL-DO-REPO>")
        print("3. git push -u origin main")
        print("4. Criar demo de 3 minutos")
        print("5. üöÄ LAN√áAR!")
    else:
        print("‚ö†Ô∏è Alguns itens precisam de aten√ß√£o antes do upload")
        if not all_modules_ok:
            print("üí° Execute: pip install -r requirements.txt")
    
    print(f"\nüåê Vers√£o: SolAgent v1.2")
    print(f"üìç Diret√≥rio: {os.getcwd()}")

if __name__ == "__main__":
    main()